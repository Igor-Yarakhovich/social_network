{"version":3,"sources":["components/Messages/Messages.module.css","components/Messages/Dialogs/Dialogs.module.css","components/Messages/Message/Message.module.css","components/Messages/Dialogs/Dialogs.tsx","components/Messages/Message/Message.tsx","components/Messages/MessagesContainer.tsx","components/Messages/Messages.tsx"],"names":["module","exports","Dialogs","props","path","id","className","m","item","alt","src","userPhoto","to","name","Message","item_text","text","MessagesContainer","compose","connect","state","messagesData","messagesPage","dialogsData","isAuth","auth","dispatch","addMessage","newMessageText","newMessageAC","withAuthRedirect","messageElement","map","d","dialogElement","Messages","Messages_text","Messages_items"],"mappings":"qGACAA,EAAOC,QAAU,CAAC,SAAW,2BAA2B,eAAiB,iCAAiC,cAAgB,gCAAgC,cAAgB,kC,oBCA1KD,EAAOC,QAAU,CAAC,KAAO,sBAAsB,KAAO,wB,oBCAtDD,EAAOC,QAAU,CAAC,UAAY,6B,iLCUjBC,EAAsC,SAACC,GAChD,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OAAO,sBAAKC,UAAWC,IAAEC,KAAlB,UACH,qBAAKC,IAAI,GAAGC,IAAKC,MACjB,cAAC,IAAD,CAASC,GAAIR,EAAb,SACI,qBAAKE,UAAWC,IAAEM,KAAlB,SAAyBV,EAAMU,a,kBCN9BC,EAAsC,SAACX,GAChD,OAAO,qBAAKG,UAAWC,IAAEQ,UAAlB,SACFZ,EAAMa,Q,gBCiCFC,EAAoBC,YAC7BC,aAlBkB,SAACC,GACnB,MAAO,CACHC,aAAcD,EAAME,aAAaD,aACjCE,YAAaH,EAAME,aAAaC,YAChCC,OAAQJ,EAAMK,KAAKD,WAIF,SAACE,GAEtB,MAAO,CACHC,WAAY,SAACC,GACTF,EAASG,YAAaD,SAO9BE,IAF6BZ,ECrCT,SAACf,GACrB,IAAI4B,EAAiB5B,EAAMkB,aAAaW,KAAI,SAACC,GAAD,OAAoB,cAAC,EAAD,CAAoBpB,KAAMoB,EAAEpB,KAAMR,GAAI4B,EAAE5B,IAA1B4B,EAAE5B,OAC5E6B,EAAgB/B,EAAMoB,YAAYS,KAAI,SAACzB,GAAD,OAAmB,cAAC,EAAD,CAAoBS,KAAMT,EAAES,KAAMX,GAAIE,EAAEF,IAA1BE,EAAEF,OAK7E,OACI,sBAAKC,UAAWC,IAAE4B,SAAlB,UAEQ,qBAAK7B,UAAWC,IAAE6B,cAAlB,SACKL,IAEL,qBAAKzB,UAAWC,IAAE8B,eAAlB,SACKH","file":"static/js/3.6be63911.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Messages\":\"Messages_Messages__1y4Bo\",\"Messages_items\":\"Messages_Messages_items__g4vV6\",\"Messages_text\":\"Messages_Messages_text__3M9TU\",\"ButtonMessage\":\"Messages_ButtonMessage__acuuy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Dialogs_item__U25PM\",\"name\":\"Dialogs_name__26ffs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item_text\":\"Message_item_text__1ci8I\"};","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport m from './Dialogs.module.css'\r\nimport userPhoto from '../../../assets/images/UserAvatar.png'\r\n\r\n\r\ntype DialogsPropsType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nexport const Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n    let path = '/Message/' + props.id\r\n    return <div className={m.item}>\r\n        <img alt='' src={userPhoto} />\r\n        <NavLink to={path}>\r\n            <div className={m.name}>{props.name}</div>\r\n        </NavLink>\r\n    </div>\r\n}\r\n\r\n","import React from 'react';\r\n\r\nimport m from './Message.module.css'\r\n\r\n\r\ntype MessagePropsType = {\r\n    id:string\r\n    text: string\r\n}\r\n\r\nexport const Message: React.FC<MessagePropsType> = (props) => {\r\n    return <div className={m.item_text}>\r\n        {props.text}\r\n    </div>\r\n}\r\n\r\n","import {ComponentClass} from 'react';\r\nimport {ActionsType, newMessageAC} from \"../../redux/messagesReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootType} from \"../../redux/store\";\r\nimport {Messages} from \"./Messages\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype mstpType = {\r\n    messagesData: Array<MessageType>;\r\n    dialogsData: Array<DialogType>\r\n    isAuth: boolean\r\n}\r\n\r\nexport type DialogType = {\r\n    text: string\r\n    id: string\r\n}\r\n\r\nexport type MessageType = {\r\n    name: string\r\n    id: string\r\n}\r\n\r\ntype mdtpType = {\r\n    addMessage: (newMessageText: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: RootType): mstpType => {\r\n    return {\r\n        messagesData: state.messagesPage.messagesData,\r\n        dialogsData: state.messagesPage.dialogsData,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: (action: ActionsType) => void): mdtpType => {\r\n\r\n    return {\r\n        addMessage: (newMessageText: string) => {\r\n            dispatch(newMessageAC(newMessageText))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MessagesContainer = compose<ComponentClass>(\r\n    connect<mstpType, mdtpType, {}, RootType>(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Messages)\r\n\r\n","import React from 'react';\r\nimport m from './Messages.module.css'\r\n\r\nimport {Dialogs} from \"./Dialogs/Dialogs\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogType, MessageType} from \"./MessagesContainer\";\r\n\r\n\r\nexport const Messages = (props: MessagesType) => {\r\n    let messageElement = props.messagesData.map((d: MessageType) => <Dialogs key={d.id} name={d.name} id={d.id}/>)\r\n    let dialogElement = props.dialogsData.map((m: DialogType) => <Message key={m.id} text={m.text} id={m.id}/>)\r\n\r\n    // let addNewMessage = (value: any) => {\r\n    //     props.addMessage(value.newMessageText)\r\n    // }\r\n    return (\r\n        <div className={m.Messages}>\r\n\r\n                <div className={m.Messages_text}>\r\n                    {messageElement}\r\n                </div>\r\n                <div className={m.Messages_items}>\r\n                    {dialogElement}\r\n                </div>\r\n\r\n            {/*<MessageReduxForm onSubmit={addNewMessage}/>*/}\r\n        </div>\r\n    )\r\n}\r\n\r\ntype MessagesType = {\r\n    messagesData: Array<MessageType>\r\n    dialogsData: Array<DialogType>\r\n    newMessageText: string\r\n    addMessage: (newMessageText: string) => void\r\n    onMessageOnchange: (text: string) => void\r\n    isAuth: boolean\r\n}\r\n\r\n\r\n"],"sourceRoot":""}